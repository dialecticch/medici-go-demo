// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aggregators/aggregator.go

// Package testdata is a generated GoMock package.
package testdata

import (
	reflect "reflect"

	aggregators "github.com/dialecticch/medici-go/pkg/aggregators"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockAggregator is a mock of Aggregator interface.
type MockAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorMockRecorder
}

// MockAggregatorMockRecorder is the mock recorder for MockAggregator.
type MockAggregatorMockRecorder struct {
	mock *MockAggregator
}

// NewMockAggregator creates a new mock instance.
func NewMockAggregator(ctrl *gomock.Controller) *MockAggregator {
	mock := &MockAggregator{ctrl: ctrl}
	mock.recorder = &MockAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregator) EXPECT() *MockAggregatorMockRecorder {
	return m.recorder
}

// GetApprovalSpender mocks base method.
func (m *MockAggregator) GetApprovalSpender(arg0 uint64) (*common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApprovalSpender", arg0)
	ret0, _ := ret[0].(*common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApprovalSpender indicates an expected call of GetApprovalSpender.
func (mr *MockAggregatorMockRecorder) GetApprovalSpender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApprovalSpender", reflect.TypeOf((*MockAggregator)(nil).GetApprovalSpender), arg0)
}

// GetQuote mocks base method.
func (m *MockAggregator) GetQuote(arg0 aggregators.QuoteArgs) (*aggregators.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuote", arg0)
	ret0, _ := ret[0].(*aggregators.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuote indicates an expected call of GetQuote.
func (mr *MockAggregatorMockRecorder) GetQuote(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuote", reflect.TypeOf((*MockAggregator)(nil).GetQuote), arg0)
}

// GetSwap mocks base method.
func (m *MockAggregator) GetSwap(arg0 aggregators.SwapArgs) (*aggregators.Swap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwap", arg0)
	ret0, _ := ret[0].(*aggregators.Swap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwap indicates an expected call of GetSwap.
func (mr *MockAggregatorMockRecorder) GetSwap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwap", reflect.TypeOf((*MockAggregator)(nil).GetSwap), arg0)
}
