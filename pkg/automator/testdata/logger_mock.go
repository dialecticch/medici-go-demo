// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/automator/logger/logger.go

// Package testdata is a generated GoMock package.
package testdata

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Failed mocks base method.
func (m *MockLogger) Failed(arg0 *types.Receipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Failed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Failed indicates an expected call of Failed.
func (mr *MockLoggerMockRecorder) Failed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockLogger)(nil).Failed), arg0)
}

// MaxRetriesReached mocks base method.
func (m *MockLogger) MaxRetriesReached(arg0, arg1 common.Address, arg2 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxRetriesReached", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MaxRetriesReached indicates an expected call of MaxRetriesReached.
func (mr *MockLoggerMockRecorder) MaxRetriesReached(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxRetriesReached", reflect.TypeOf((*MockLogger)(nil).MaxRetriesReached), arg0, arg1, arg2)
}

// SendError mocks base method.
func (m *MockLogger) SendError(arg0 error, arg1 common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendError", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendError indicates an expected call of SendError.
func (mr *MockLoggerMockRecorder) SendError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendError", reflect.TypeOf((*MockLogger)(nil).SendError), arg0, arg1)
}
